{
  "nbs/mlmodel.ipynb": {
    "metadata": {
      "notebook_path": "nbs/mlmodel.ipynb",
      "timestamp": "2024-12-04T16:22:56.292430",
      "bias_threshold": 0.1
    },
    "summary": {
      "total_cells": 3,
      "reproducible_cells": 3,
      "non_reproducible_cells": 0,
      "random_cells": 2,
      "reproducible_random_cells": 2,
      "non_reproducible_random_cells": 0,
      "no_output_cells": 0
    },
    "non_reproducible_details": {
      "execution_errors": [],
      "output_mismatches": [],
      "missing_expected_outputs": [],
      "unexpected_new_outputs": [],
      "failed_random_cells": []
    },
    "library_analysis": {
      "installed": [
        "numpy",
        "pandas",
        "scikit-learn"
      ],
      "required": [
        "numpy",
        "pandas",
        "sklearn"
      ],
      "missing": [
        "sklearn"
      ]
    },
    "cell_results": [
      {
        "cell_number": 2,
        "reproducible": true,
        "is_random": true,
        "source": "# Set random seed for reproducibility\nnp.random.seed(42)\n# Load and prepare the iris dataset\niris = load_iris()\nX = pd.DataFrame(iris.data, columns=iris.feature_names)\ny = iris.target\n\n# Split the data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\nprint(\"Training set shape:\", X_train.shape)\nprint(\"Test set shape:\", X_test.shape)",
        "had_original_output": true,
        "random_execution_successful": true
      },
      {
        "cell_number": 3,
        "reproducible": true,
        "is_random": true,
        "source": "# Train a RandomForest classifier\nrf_model = RandomForestClassifier(n_estimators=100, random_state=42)\nrf_model.fit(X_train, y_train)\n\n# Make predictions\ny_pred = rf_model.predict(X_test)\n\n# Calculate and print accuracy\naccuracy = accuracy_score(y_test, y_pred)\nprint(f\"Model accuracy: {accuracy:.3f}\")",
        "had_original_output": true,
        "random_execution_successful": true
      },
      {
        "cell_number": 4,
        "reproducible": true,
        "is_random": false,
        "source": "# Show feature importance\nfeature_importance = pd.DataFrame({\n    'feature': iris.feature_names,\n    'importance': rf_model.feature_importances_\n})\nfeature_importance.sort_values('importance', ascending=False)",
        "had_original_output": true
      }
    ],
    "ml_analysis": {
      "models": {
        "model_3": {
          "cell_number": 3,
          "variable_name": "rf_model",
          "original_bias": 0.0,
          "model_type": "RandomForestClassifier",
          "parameters": {
            "bootstrap": true,
            "ccp_alpha": 0.0,
            "class_weight": null,
            "criterion": "gini",
            "max_depth": null,
            "max_features": "sqrt",
            "max_leaf_nodes": null,
            "max_samples": null,
            "min_impurity_decrease": 0.0,
            "min_samples_leaf": 1,
            "min_samples_split": 2,
            "min_weight_fraction_leaf": 0.0,
            "monotonic_cst": null,
            "n_estimators": 100,
            "n_jobs": null,
            "oob_score": false,
            "random_state": 42,
            "verbose": 0,
            "warm_start": false
          },
          "retrained_bias": 0.0,
          "bias_difference": 0.0,
          "lime_analysis": {
            "original_explanation": [
              [
                "0.40 < petal width (cm) <= 1.30",
                0.30533689413513615
              ],
              [
                "4.30 < petal length (cm) <= 5.10",
                0.14279513663660576
              ],
              [
                "sepal width (cm) <= 2.80",
                -0.057412102446783395
              ],
              [
                "5.80 < sepal length (cm) <= 6.40",
                -0.025080773598747854
              ]
            ],
            "retrained_explanation": [
              [
                "0.40 < petal width (cm) <= 1.30",
                0.30710947238901903
              ],
              [
                "4.30 < petal length (cm) <= 5.10",
                0.153297077907602
              ],
              [
                "sepal width (cm) <= 2.80",
                -0.04300226716952484
              ],
              [
                "5.80 < sepal length (cm) <= 6.40",
                -0.002183596100514721
              ]
            ],
            "feature_importance_diff": {
              "4.30 < petal length (cm) <= 5.10": {
                "original_importance": 0.14279513663660576,
                "retrained_importance": 0.153297077907602,
                "absolute_difference": 0.01050194127099624
              },
              "sepal width (cm) <= 2.80": {
                "original_importance": -0.057412102446783395,
                "retrained_importance": -0.04300226716952484,
                "absolute_difference": 0.014409835277258552
              },
              "5.80 < sepal length (cm) <= 6.40": {
                "original_importance": -0.025080773598747854,
                "retrained_importance": -0.002183596100514721,
                "absolute_difference": 0.022897177498233133
              }
            },
            "prediction_probabilities": {
              "original": [
                0.0,
                0.97,
                0.03
              ],
              "retrained": [
                0.0,
                0.97,
                0.03
              ]
            }
          }
        },
        "model_4": {
          "cell_number": 4,
          "variable_name": "rf_model",
          "original_bias": 0.0,
          "model_type": "RandomForestClassifier",
          "parameters": {
            "bootstrap": true,
            "ccp_alpha": 0.0,
            "class_weight": null,
            "criterion": "gini",
            "max_depth": null,
            "max_features": "sqrt",
            "max_leaf_nodes": null,
            "max_samples": null,
            "min_impurity_decrease": 0.0,
            "min_samples_leaf": 1,
            "min_samples_split": 2,
            "min_weight_fraction_leaf": 0.0,
            "monotonic_cst": null,
            "n_estimators": 100,
            "n_jobs": null,
            "oob_score": false,
            "random_state": 42,
            "verbose": 0,
            "warm_start": false
          },
          "retrained_bias": 0.0,
          "bias_difference": 0.0,
          "lime_analysis": {
            "original_explanation": [
              [
                "0.40 < petal width (cm) <= 1.30",
                0.30533689413513615
              ],
              [
                "4.30 < petal length (cm) <= 5.10",
                0.14279513663660576
              ],
              [
                "sepal width (cm) <= 2.80",
                -0.057412102446783395
              ],
              [
                "5.80 < sepal length (cm) <= 6.40",
                -0.025080773598747854
              ]
            ],
            "retrained_explanation": [
              [
                "0.40 < petal width (cm) <= 1.30",
                0.30710947238901903
              ],
              [
                "4.30 < petal length (cm) <= 5.10",
                0.153297077907602
              ],
              [
                "sepal width (cm) <= 2.80",
                -0.04300226716952484
              ],
              [
                "5.80 < sepal length (cm) <= 6.40",
                -0.002183596100514721
              ]
            ],
            "feature_importance_diff": {
              "4.30 < petal length (cm) <= 5.10": {
                "original_importance": 0.14279513663660576,
                "retrained_importance": 0.153297077907602,
                "absolute_difference": 0.01050194127099624
              },
              "sepal width (cm) <= 2.80": {
                "original_importance": -0.057412102446783395,
                "retrained_importance": -0.04300226716952484,
                "absolute_difference": 0.014409835277258552
              },
              "5.80 < sepal length (cm) <= 6.40": {
                "original_importance": -0.025080773598747854,
                "retrained_importance": -0.002183596100514721,
                "absolute_difference": 0.022897177498233133
              }
            },
            "prediction_probabilities": {
              "original": [
                0.0,
                0.97,
                0.03
              ],
              "retrained": [
                0.0,
                0.97,
                0.03
              ]
            }
          }
        }
      }
    }
  }
}